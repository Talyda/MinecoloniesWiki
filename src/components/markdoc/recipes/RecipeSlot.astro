---
import { isCollectionEntry } from '@utils/util';
import type { ReferenceDataEntry } from 'astro:content';
import { getEntry } from 'astro:content';
import type { RecipeItems } from 'src/schemas/recipe';

import RecipeSlotIcon from './RecipeSlotIcon.astro';

interface Props {
  items: RecipeItems;
  amount?: number;
  large?: boolean;
}

const { items, amount = 1, large = false } = Astro.props;

let parsedItems: ReferenceDataEntry<'items'>[];
if (items === null) {
  parsedItems = [];
} else if (Array.isArray(items)) {
  parsedItems = items;
} else {
  if (isCollectionEntry(items, 'items')) {
    parsedItems = [items];
  } else {
    const tag = await getEntry(items);
    parsedItems = tag.data;
  }
}

const itemResults = await Promise.all(parsedItems.filter((f) => f !== null).map((item) => getEntry(item)));
---

{
  (
    <div class:list={['invslot', large ? 'invslot-large' : '']}>
      {itemResults.map((item) => (
        <RecipeSlotIcon item={item} />
      ))}
      {amount > 1 && (
        <div class="invslot-stacksize">
          <span>{amount}</span>
        </div>
      )}
    </div>
  )
}

<script>
  import type { SwiperContainer } from 'swiper/element';

  function updateSwipers(version: string) {
    const swipers = document.querySelectorAll<SwiperContainer>('swiper-container[data-recipe-slot]');
    swipers.forEach((swiper) => {
      swiper.initialize();
      if (swiper.dataset.recipeVersion === version) {
        swiper.swiper.enable();
      } else {
        swiper.swiper.disable();
      }
    });
  }

  function update(mutations: MutationRecord[]) {
    for (const mutation of mutations) {
      if (
        mutation.type === 'attributes' &&
        mutation.attributeName === 'data-version' &&
        mutation.target instanceof HTMLElement
      ) {
        updateSwipers(mutation.target.dataset.version!);
      }
    }
  }

  const versionObserver = new MutationObserver(update);

  function setup() {
    versionObserver.observe(document.body, { attributes: true });
    updateSwipers(document.body.dataset.version!);
  }

  document.addEventListener('astro:page-load', setup);
</script>

<style style="scss">
  img {
    max-width: none;
  }

  .invslot {
    --invslot-size: 2em;
    display: inline-block;
    position: relative;
    width: var(--invslot-size);
    height: var(--invslot-size);
    background: #8b8b8b;
    border: 2px solid;
    border-color: #373737 #fff #fff #373737;

    &.invslot-large {
      --invslot-size: 3em;
    }

    &::before,
    &::after {
      background-color: #8b8b8b;
      content: '';
      height: 2px;
      position: absolute;
      width: 2px;
    }

    &::before {
      bottom: -2px;
      left: -2px;
    }

    &::after {
      right: -2px;
      top: -2px;
    }

    .invslot-item {
      width: 100%;
      height: 100%;
    }

    .invslot-wrapper {
      display: flex;
      justify-content: center;
      align-items: center;
      width: calc(var(--invslot-size) - 4px);
      height: calc(var(--invslot-size) - 4px);
    }

    .invslot-stacksize {
      position: absolute;
      bottom: 0;
      right: 0;
      color: #fff !important;
      text-shadow: 2px 2px 0 #3f3f3f;
      filter: dropshadow(color=#3F3F3F, offx=2, offy=2);
      z-index: 1;
    }

    .inv-sprite {
      width: calc(2em - 4px);
      height: calc(2em - 4px);
    }
  }
</style>
