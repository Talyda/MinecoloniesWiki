---
import type { Overrideable, OverrideableFieldGetter } from '@utils/override';
import { getOverrideValue } from '@utils/override';
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';

import VersionContent from './VersionContent.astro';

interface Props<V, O extends Overrideable<V>> {
  value: O;
  fieldGetter: OverrideableFieldGetter<O>;
}

const { value, fieldGetter } = Astro.props as Props<unknown, Overrideable<unknown>>;

const versions = await getCollection('versions');

const values = new Map<string, CollectionEntry<'versions'>[]>();
for (const version of versions) {
  const versionedValue = await getOverrideValue(value, fieldGetter, version);
  if (versionedValue === undefined) {
    continue;
  }

  if (!values.has(versionedValue)) {
    values.set(versionedValue, []);
  }
  values.get(versionedValue)?.push(version);
}
---

{values.entries().map(async ([value, versions]) => <VersionContent versions={versions}>{value}</VersionContent>)}
